// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Define the data model for the Flower Preservation Store
// Prisma Schema for Flower Preservation Store

model User {
  id            Int         @id @default(autoincrement())
  userId        String      @unique // Unique ID from LINE authentication
  password      String?
  isAdmin       Boolean     @default(false) // Flag to indicate if the user is an admin
  displayName   String // User's display name from LINE
  pictureUrl    String? // Profile picture URL from LINE
  statusMessage String? // User's status message from LINE (optional)
  createdDate   DateTime    @default(now()) // Date of user creation
  address       String? // User's contact address
  emailVerified DateTime?
  orders        Order[] // Relation to Orders
  orderItem     OrderItem[]
  Account       Account[]
  Session       Session[]
}

// Add these models while keeping your existing ones

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id            Int           @id @default(autoincrement())
  customId      String?
  orderStatus   OrderStatus   @default(INPROCESS)
  paymentStatus PaymentStatus @default(UNPAID)
  createdDate   DateTime      @default(now())
  userId        Int
  totalPrice    Float         @default(0)
  user          User          @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
}

enum OrderStatus {
  PENDING
  INPROCESS
  SHIPPED
}

enum ProductionStatus {
  CART
  PENDING
  DRIED
  PATTERN_CONFIRMED
  RESIN_CURED
  SHIPPED
}

enum PaymentStatus {
  UNPAID
  PENDING
  HALF_PAID
  FULL_PAID
}

model OrderItem {
  id     Int              @id @default(autoincrement())
  name   String
  status ProductionStatus @default(CART) // Can be pending, dried, etc.
  price  Float
  note   String?
  variant String?        // New field for variant

  // Addons
  colorRefinement Boolean @default(false)
  message         String? // Optional message
  addOnItem       Boolean // Optional addon item

  orderId   Int?
  productId Int
  product   Product @relation(fields: [productId], references: [id]) // Relationship with Product

  userId Int
  user   User   @relation(fields: [userId], references: [id]) // Relationship with User
  order  Order? @relation(fields: [orderId], references: [id])
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  dimensions  String?
  price       Float
  images      Image[]
  subProduct  Boolean   @default(false)
  hasVariants Boolean   @default(false) // New field to indicate if product has variants
  variants    Variant[] // Optional relation to Variants
  allowColorRefinement Boolean @default(true)
  allowMessage         Boolean @default(true)
  allowAddOnItem      Boolean @default(true)
  colorRefinement     Float?   @default(200)
  message             Float?   @default(200)
  addOnItem           Float?   @default(200)

  orderItems OrderItem[]
}

model Variant {
  id        Int     @id @default(autoincrement())
  name      String  // This will store the alphabet (a,b,c,d,e,f,g)
  price     Float?  // Optional different price for variant
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
