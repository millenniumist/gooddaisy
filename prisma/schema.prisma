// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

// Define the data model for the Flower Preservation Store
// Prisma Schema for Flower Preservation Store

model User {
  id            Int         @id @default(autoincrement())
  userId        String      @unique // Unique ID from LINE authentication
  password      String?      
  isAdmin       Boolean     @default(false) // Flag to indicate if the user is an admin
  displayName   String // User's display name from LINE
  pictureUrl    String? // Profile picture URL from LINE
  statusMessage String? // User's status message from LINE (optional)
  createdDate   DateTime    @default(now()) // Date of user creation
  address       String? // User's contact address
  orders        Order[] // Relation to Orders
  orderItem     OrderItem[]
}

model Order {
  id               Int              @id @default(autoincrement())
  customId         String?
  productionStatus OrderStatus @default(INPROCESS)
  paymentStatus    PaymentStatus    @default(UNPAID)
  createdDate      DateTime         @default(now())
  userId           Int
  totalPrice       Float          @default(0) 
  user             User             @relation(fields: [userId], references: [id])
  orderItems       OrderItem[]
}
enum OrderStatus {
  PENDING
  INPROCESS
  SHIPPED
}
enum ProductionStatus {
  CART
  PENDING
  DRIED
  PATTERN_CONFIRMED
  RESIN_CURED
  SHIPPED
}

enum PaymentStatus {
  UNPAID
  PENDING
  HALF_PAID
  FULL_PAID
}

model OrderItem {
  id     Int              @id @default(autoincrement())
  name   String
  status ProductionStatus @default(CART) // Can be pending, dried, etc.
  price  Float
  note   String?

  // Addons
  colorRefinement Boolean @default(false)
  message         String? // Optional message
  addOnItem       Boolean // Optional addon item

  orderId   Int?
  productId Int
  product   Product @relation(fields: [productId], references: [id]) // Relationship with Product

  userId Int
  user   User   @relation(fields: [userId], references: [id]) // Relationship with User
  order  Order? @relation(fields: [orderId], references: [id])
}

model Product {
  id     Int     @id @default(autoincrement())
  name   String
  price  Float 
  images Image[] // Relation to Images
  subProduct Boolean @default(false)

  allowColorRefinement Boolean  @default(true)
  allowMessage         Boolean  @default(true)
  allowAddOnItem       Boolean  @default(true)
  // Addons
  colorRefinement      Float? @default(200) 
  message              Float? @default(0) 
  addOnItem            Float? @default(0) 

  orderItems OrderItem[] // Relation to OrderItems
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
